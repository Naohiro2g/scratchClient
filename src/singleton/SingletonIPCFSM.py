# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : singletonIPC.sm

 
  # singletonIPC state machine


import statemap

import random

class SingletonIPCState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Shutdown(self, fsm):
        self.Default(fsm)

    def SocketFail(self, fsm):
        self.Default(fsm)

    def Start(self, fsm, timeslice):
        self.Default(fsm)

    def Success(self, fsm):
        self.Default(fsm)

    def Timeout(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class SingletonMap_Default(SingletonIPCState):
    pass

class SingletonMap_Start(SingletonMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._debug("Start")

    def SocketFail(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._debug("Start --[SocketFail]--> Running")
        finally:
            fsm.setState(SingletonMap.Running)
            fsm.getState().Entry(fsm)

    def Start(self, fsm, timeslice):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._debug("Start --[Start]--> Running")
        finally:
            fsm.setState(SingletonMap.Running)
            fsm.getState().Entry(fsm)

class SingletonMap_Running(SingletonMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._debug("Running.Entry")
        ctxt.action_StartServer()

    def Exit(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._debug("Running.Exit")
        ctxt.action_StopServer()

    def Shutdown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._debug("Running --[Shutdown]--> Stopped")
        finally:
            fsm.setState(SingletonMap.Stopped)
            fsm.getState().Entry(fsm)

    def SocketFail(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._debug("Running --[SocketFail]--> Client")
        finally:
            fsm.setState(SingletonMap.Client)
            fsm.getState().Entry(fsm)

class SingletonMap_WaitRunning(SingletonMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._debug("WaitRunning.Entry")
        ctxt.action_Timer(random.uniform(0.1, 0.5))

    def Exit(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._debug("WaitRunning.Exit")
        ctxt.action_TimerStop()

    def Shutdown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._debug("WaitRunning --[Shutdown]--> Stopped")
        finally:
            fsm.setState(SingletonMap.Stopped)
            fsm.getState().Entry(fsm)

    def Success(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._debug("WaitRunning --[Success]--> Running")
        finally:
            fsm.setState(SingletonMap.Running)
            fsm.getState().Entry(fsm)

    def Timeout(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(SingletonMap.Running)
        fsm.getState().Entry(fsm)

class SingletonMap_Client(SingletonMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._debug("Client")
        ctxt.action_Client()

    def Shutdown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._debug("Client --[Shutdown]--> Stopped")
            ctxt.action_StopServer()
        finally:
            fsm.setState(SingletonMap.Stopped)
            fsm.getState().Entry(fsm)

    def SocketFail(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._debug("Client --[SocketFail]--> WaitRunning")
        finally:
            fsm.setState(SingletonMap.WaitRunning)
            fsm.getState().Entry(fsm)

    def Success(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._debug("Client --[Success]--> WaitRunning")
        finally:
            fsm.setState(SingletonMap.WaitRunning)
            fsm.getState().Entry(fsm)

class SingletonMap_Stopped(SingletonMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt._debug("Stopped.Entry")
        ctxt.action_Shutdown()

    def SocketFail(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._debug("Stopped ..[SocketFail]..> Stopped")
        finally:
            fsm.setState(endState)

    def Success(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._debug("Stopped ..[Success]..> Stopped")
        finally:
            fsm.setState(endState)

class SingletonMap(object):

    Start = SingletonMap_Start('SingletonMap.Start', 0)
    Running = SingletonMap_Running('SingletonMap.Running', 1)
    WaitRunning = SingletonMap_WaitRunning('SingletonMap.WaitRunning', 2)
    Client = SingletonMap_Client('SingletonMap.Client', 3)
    Stopped = SingletonMap_Stopped('SingletonMap.Stopped', 4)
    Default = SingletonMap_Default('SingletonMap.Default', -1)

class SingletonIPC_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, SingletonMap.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
